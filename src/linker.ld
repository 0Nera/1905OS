/*
	Этот файл представляет собой скрипт линковки. 
	Он используется для определения того, как биты окончательного исполняемого файла ядра будут сшиваться вместе. 
	Это позволяет нам указывать выравнивание, смещение адреса и другие полезные свойства частей кода, которые нам нужны, когда наше ядро связывается вместе в исполняемый файл. 
	Обычно вы этого не делаете, когда пишете код на C - компилятор сделает это за вас. 
	Но это ядро операционной системы, поэтому нам нужно явно определить многие из этих вещей.
*/

/* Загрузчик начнет выполнение с символа, обозначенного как точка входа. В данном случае это функция start (определенная в файле start.s). */
ENTRY(start)
 
/* Сообщает компилятора части компилятора, где различные разделы ядра будут помещены в окончательный исполняемый файл ядра. */
SECTIONS
{
	/* Начинает помещать разделы в 1 мегабайт (1 МБ), хорошее место для загрузки ядра загрузчиком. */
	/* Это связано с тем, что память ниже 1 мегабайта зарезервирована для других вещей, связанных с x86, поэтому мы не можем ее использовать. */
	. = 1M;
 
	/* Мы выравниваем все разделы в исполняемом файле с точностью до 4 килобайт (4K). Это станет полезным позже в разработке, когда мы добавим разбиение на страницы. */
 
	/* Сначала поместим мультизагрузочный заголовок, так как он должен быть рядом с началом исполняемого файла, иначе загрузчик не найдет его. */
	/* Заголовок Multiboot предназначен только для чтения, поэтому мы можем поместить его в раздел ".rodata". */
	.rodata BLOCK(4K) : ALIGN(4K)
	{
		*(.multiboot)
	}
 
	/* Исполняемый код. */
	.text BLOCK(4K) : ALIGN(4K)
	{
		*(.text)
	}
 
	/* Информация только для чтения. */
	.rodata BLOCK(4K) : ALIGN(4K)
	{
		*(.rodata)
	}
 
	/* Память для чтения-записи (ициализированные). */
	.data BLOCK(4K) : ALIGN(4K)
	{
		*(.data)
	}
 
	/* Данные для чтения-записи (неинициализированные) и стек */
	.bss BLOCK(4K) : ALIGN(4K)
	{
		*(COMMON)
		*(.bss)
	}
}